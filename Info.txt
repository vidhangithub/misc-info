We've been diligently addressing vulnerabilities in our microservices infrastructure to bolster our security posture and ensure robust protection across our ecosystem. Our recent focus has been on fixing Nexus IQ SCAN vulnerabilities for our microservices and Aqua SCAN vulnerabilities for both our microservices images and the images utilized in our on-premises pipeline. Here's a breakdown of our actions:Nexus IQ SCAN Vulnerabilities: Addressing vulnerabilities identified by Nexus IQ SCAN ensures that our microservices are fortified against potential threats, enhancing overall resilience.Aqua SCAN Vulnerabilities: By diligently addressing Aqua SCAN vulnerabilities in our microservices images and on-premises pipeline images, we're proactively mitigating risks and strengthening our defense mechanisms.These efforts underscore our commitment to maintaining a secure environment for our operations and data, aligning with our organizational goals of robust cybersecurity and risk management.



docker pull selenium/standalone-firefox:nightly

docker pull selenium/standalone-chrome:nightly

docker pull selenium/standalone-edge:nightly



#!/bin/sh

# Extract the version from the pom.xml
VERSION=$(grep -m1 '<version>' /usr/src/app/pom.xml | sed -e 's/.*<version>\(.*\)<\/version>.*/\1/')
# Extract the artifactId from the pom.xml
ARTIFACT_ID=$(grep -m1 '<artifactId>' /usr/src/app/pom.xml | sed -e 's/.*<artifactId>\(.*\)<\/artifactId>.*/\1/')

# Echo the extracted version and artifactId
echo "Project Version: ${VERSION}"
echo "Artifact ID: ${ARTIFACT_ID}"

# Generate the JAR name
JAR_NAME="${ARTIFACT_ID}-${VERSION}.jar"
echo "Generated JAR Name: ${JAR_NAME}"

# Run the Maven build
mvn clean package

# Create the target directory if it doesn't exist
mkdir -p /home/jenkins/lib

# Copy the generated JAR file to the target directory
cp target/${JAR_NAME} /home/jenkins/lib/

# Optionally, you can add more commands here
# For example, running the application
# java -jar /home/jenkins/lib/${JAR_NAME}



To update your Portainer instance to the latest version with minimal disruption, you'll need to carefully follow a series of steps to ensure that the upgrade process is smooth and does not affect your running workloads. Since you're running Portainer in a Docker Swarm environment with version `18.03.0-ce`, I'll guide you through the upgrade process in such a way that it minimizes downtime and impact on your team.

### Step-by-Step Upgrade Process

#### 1. Backup Your Current Portainer Data

Before making any changes, it's important to back up your current Portainer data to prevent any loss of data.

**On the Master Node:**

```bash
# Create a backup directory
mkdir -p ~/portainer_backup

# Backup Portainer data volume
docker run --rm -v portainer_data:/data -v ~/portainer_backup:/backup busybox tar cvf /backup/portainer_data_backup.tar /data
```

This command creates a tarball of your Portainer data volume and stores it in your home directory. Ensure this backup is safely stored before proceeding.

#### 2. Check Compatibility and Read Release Notes

- **Release Notes**: Visit the [Portainer Release Notes](https://www.portainer.io/releases) page to review any breaking changes or important migration steps between your current version and the version you're upgrading to.

- **Compatibility**: Ensure your Docker version and environment are compatible with the new Portainer version.

#### 3. Update the Portainer Service in Docker Swarm

**On the Master Node:**

To update the Portainer service, you'll need to remove the existing service and redeploy it with the new version.

##### Step 1: Remove the Existing Portainer Service

```bash
docker service rm portainer
```

This command stops and removes the Portainer service without affecting your applications running in the swarm.

##### Step 2: Deploy the New Portainer Version

Deploy the new version of Portainer using the updated image tag. Replace `2.18.3` with the latest stable version available.

```bash
docker service create --name portainer \
    --publish 9443:9443 \
    --publish 8000:8000 \
    --replicas=1 \
    --constraint 'node.role == manager' \
    --mount type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock \
    --mount type=volume,source=portainer_data,target=/data \
    portainer/portainer-ce:2.18.3
```

This command will deploy Portainer using the specified version.

#### 4. Verify the Upgrade

Once the new service is running, verify that everything is functioning correctly.

- **Access the Web UI**: Open your browser and navigate to `https://<Master-Node-IP>:9443`.
- **Login**: Use your admin credentials to log in.
- **Check Version**: Navigate to the **Settings** or **About** section to confirm the version upgrade.

#### 5. Test the Deployment

- **Check Connectivity**: Ensure all your existing environments and endpoints are correctly connected.
- **Test Applications**: Verify that all applications managed by Portainer are running as expected.
- **Monitor Logs**: Review Portainer logs for any errors or warnings.

```bash
docker service logs portainer
```

#### 6. Clean Up

After verifying the upgrade, you can remove the backup if everything is functioning well. However, it's good practice to keep the backup for some time until you're completely satisfied with the new setup.

```bash
# Remove backup if necessary
rm -rf ~/portainer_backup
```

### Additional Considerations

- **Downtime**: The upgrade process involves removing and redeploying the Portainer service, which will cause a brief downtime. Communicate with your team to plan for this window.
- **Network Policies**: Ensure your network policies allow for access on the necessary ports (9443 and 8000) if there are any changes.
- **Regular Updates**: Consider setting up a routine check for updates and apply them during maintenance windows to keep your Portainer instance secure and up-to-date.

### Troubleshooting Tips

- **Deployment Issues**: If the new deployment doesn't start, check Docker daemon logs on the manager node for error messages.
- **Data Loss**: In case of data loss, restore from your backup using the command:

  ```bash
  docker run --rm -v portainer_data:/data -v ~/portainer_backup:/backup busybox tar xvf /backup/portainer_data_backup.tar -C /
  ```

- **Compatibility Issues**: If you encounter issues, refer to the [Portainer Forums](https://forums.portainer.io/) for community support or consult the [Portainer Documentation](https://documentation.portainer.io/) for additional guidance.

By following these steps, you should be able to upgrade Portainer with minimal disruption to your team. Always ensure to plan such upgrades during off-peak hours if possible and communicate with your team to minimize any potential impact.





import org.springframework.boot.env.PropertySourceLoader;
import org.springframework.core.env.PropertySource;
import org.springframework.core.env.MapPropertySource;
import org.springframework.core.io.Resource;
import safeyaml.YAMLParser;

import java.io.IOException;
import java.util.Map;

public class SafeYamlPropertySourceLoader implements PropertySourceLoader {
    @Override
    public String[] getFileExtensions() {
        return new String[]{"yaml", "yml"};
    }

    @Override
    public PropertySource<?> load(String name, Resource resource, String profile) throws IOException {
        if (!resource.exists()) return null;

        YAMLParser parser = new YAMLParser(resource.getInputStream());
        Map<String, Object> yamlData = parser.parse();
        return new MapPropertySource(name, yamlData);
    }
}


Dear [Manager's Name],

I hope you are well. I am writing to kindly request an exception to work from home until our baby arrives, as the due date is fast approaching. Our doctor has advised that the delivery could happen at any time now, and staying closer to home would allow me to respond quickly and provide immediate support when needed.

I want to assure you that I remain fully committed to my responsibilities and will continue to manage my work effectively from home during this period. I will stay connected and ensure all tasks and meetings are handled without disruption.

I greatly appreciate your understanding and support during this important time for my family. Please let me know if you need any further details or if there are formalities I should complete for this arrangement.

Thank you very much for your consideration.

Warm regards,
[Your Name]


kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml








