We've been diligently addressing vulnerabilities in our microservices infrastructure to bolster our security posture and ensure robust protection across our ecosystem. Our recent focus has been on fixing Nexus IQ SCAN vulnerabilities for our microservices and Aqua SCAN vulnerabilities for both our microservices images and the images utilized in our on-premises pipeline. Here's a breakdown of our actions:Nexus IQ SCAN Vulnerabilities: Addressing vulnerabilities identified by Nexus IQ SCAN ensures that our microservices are fortified against potential threats, enhancing overall resilience.Aqua SCAN Vulnerabilities: By diligently addressing Aqua SCAN vulnerabilities in our microservices images and on-premises pipeline images, we're proactively mitigating risks and strengthening our defense mechanisms.These efforts underscore our commitment to maintaining a secure environment for our operations and data, aligning with our organizational goals of robust cybersecurity and risk management.



docker pull selenium/standalone-firefox:nightly

docker pull selenium/standalone-chrome:nightly

docker pull selenium/standalone-edge:nightly



#!/bin/sh

# Extract the version from the pom.xml
VERSION=$(grep -m1 '<version>' /usr/src/app/pom.xml | sed -e 's/.*<version>\(.*\)<\/version>.*/\1/')
# Extract the artifactId from the pom.xml
ARTIFACT_ID=$(grep -m1 '<artifactId>' /usr/src/app/pom.xml | sed -e 's/.*<artifactId>\(.*\)<\/artifactId>.*/\1/')

# Echo the extracted version and artifactId
echo "Project Version: ${VERSION}"
echo "Artifact ID: ${ARTIFACT_ID}"

# Generate the JAR name
JAR_NAME="${ARTIFACT_ID}-${VERSION}.jar"
echo "Generated JAR Name: ${JAR_NAME}"

# Run the Maven build
mvn clean package

# Create the target directory if it doesn't exist
mkdir -p /home/jenkins/lib

# Copy the generated JAR file to the target directory
cp target/${JAR_NAME} /home/jenkins/lib/

# Optionally, you can add more commands here
# For example, running the application
# java -jar /home/jenkins/lib/${JAR_NAME}

